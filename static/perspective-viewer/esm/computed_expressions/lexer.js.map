{"version":3,"sources":["../../../src/js/computed_expressions/lexer.js"],"names":["Lexer","createToken","PerspectiveLexerErrorMessage","vocabulary","OperatorTokenType","name","pattern","NA","FunctionTokenType","UpperLowerCaseTokenType","column_name_regex_pattern","match_column_name","string","start_offset","lastIndex","result","exec","length","payload","ColumnName","line_breaks","As","longer_alt","Add","categories","Subtract","Multiply","Divide","Pow","PercentOf","Equals","NotEquals","GreaterThan","LessThan","Is","Sqrt","Pow2","Abs","Invert","Log","Exp","Bin10","Bin100","Bin1000","Bin10th","Bin100th","Bin1000th","Length","Lowercase","Uppercase","ConcatComma","ConcatSpace","HourOfDay","DayOfWeek","MonthOfYear","SecondBucket","MinuteBucket","HourBucket","DayBucket","WeekBucket","MonthBucket","YearBucket","LeftParen","RightParen","Comma","Whitespace","group","SKIPPED","tokens","forEach","t","lexer","errorMessageProvider","lex","input","tokenize","errors","message","map","e","Error","join"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport {Lexer, createToken} from \"chevrotain\";\nimport {PerspectiveLexerErrorMessage} from \"./error\";\n\nexport const vocabulary = {};\n\n/**\n * Create token types to categorize computations:\n * - OperatorTokenType: operators that require left and right-hand side operands\n * - FunctionTokenType: operators that have 1...n comma separated parameters.\n */\nconst OperatorTokenType = createToken({\n    name: \"OperatorTokenType\",\n    pattern: Lexer.NA\n});\n\nconst FunctionTokenType = createToken({\n    name: \"FunctionTokenType\",\n    pattern: Lexer.NA\n});\n\nconst UpperLowerCaseTokenType = createToken({\n    name: \"UpperLowerTokenType\",\n    pattern: /(uppercase|lowercase)/\n});\n\n// Create tokens for column names and computed function names\nconst column_name_regex_pattern = /([\"'])(.*?[^\\\\])\\1/y;\n\n/**\n * Given a string from which to extract a column name, extract the column name\n * in-between the quotation marks and set it as the `payload` property. In the\n * CST visitor, use `.payload` to access the true column name value.\n *\n * @param {String} string\n * @param {Number} start_offset\n */\nconst match_column_name = function(string, start_offset) {\n    column_name_regex_pattern.lastIndex = start_offset;\n    const result = column_name_regex_pattern.exec(string);\n\n    if (result !== null && result.length === 3) {\n        result.payload = result[2]; // 2nd capture group is in-between quotes\n    }\n\n    return result;\n};\n\n// Column names are always encased inside quotes.\nexport const ColumnName = createToken({\n    name: \"columnName\",\n    pattern: {exec: match_column_name},\n    line_breaks: false\n});\n\n// Allow users to specify custom names using `AS`\nexport const As = createToken({\n    name: \"as\",\n    pattern: /(AS|As|as)/,\n    longer_alt: UpperLowerCaseTokenType\n});\n\n// Mathematical operators, in the format \"x\" + \"y\"\n\nexport const Add = createToken({\n    name: \"add\",\n    pattern: /\\+/,\n    categories: [OperatorTokenType]\n});\n\nexport const Subtract = createToken({\n    name: \"subtract\",\n    pattern: /-/,\n    categories: [OperatorTokenType]\n});\n\nexport const Multiply = createToken({\n    name: \"multiply\",\n    pattern: /\\*/,\n    categories: [OperatorTokenType]\n});\n\nexport const Divide = createToken({\n    name: \"divide\",\n    pattern: /\\//,\n    categories: [OperatorTokenType]\n});\n\nexport const Pow = createToken({\n    name: \"pow\",\n    pattern: /\\^/,\n    categories: [OperatorTokenType]\n});\n\nexport const PercentOf = createToken({\n    name: \"percent_of\",\n    pattern: /\\%/,\n    categories: [OperatorTokenType]\n});\n\nexport const Equals = createToken({\n    name: \"equals\",\n    pattern: /\\==/,\n    categories: [OperatorTokenType]\n});\n\nexport const NotEquals = createToken({\n    name: \"not_equals\",\n    pattern: /\\!=/,\n    categories: [OperatorTokenType]\n});\n\nexport const GreaterThan = createToken({\n    name: \"greater_than\",\n    pattern: /\\>/,\n    categories: [OperatorTokenType]\n});\n\nexport const LessThan = createToken({\n    name: \"less_than\",\n    pattern: /\\</,\n    categories: [OperatorTokenType]\n});\n\nexport const Is = createToken({\n    name: \"is\",\n    pattern: /\\is/,\n    categories: [OperatorTokenType]\n});\n\n// Function operators, in the format func(\"x\")\nexport const Sqrt = createToken({\n    name: \"sqrt\",\n    pattern: /sqrt/,\n    categories: [FunctionTokenType]\n});\n\nexport const Pow2 = createToken({\n    name: \"pow2\",\n    pattern: /pow2/,\n    categories: [FunctionTokenType]\n});\n\nexport const Abs = createToken({\n    name: \"abs\",\n    pattern: /abs/,\n    categories: [FunctionTokenType]\n});\n\nexport const Invert = createToken({\n    name: \"invert\",\n    pattern: /invert/,\n    categories: [FunctionTokenType]\n});\n\nexport const Log = createToken({\n    name: \"log\",\n    pattern: /log/,\n    categories: [FunctionTokenType]\n});\n\nexport const Exp = createToken({\n    name: \"exp\",\n    pattern: /exp/,\n    categories: [FunctionTokenType]\n});\n\n// Bucketing functions\n\nexport const Bin10 = createToken({\n    name: \"bin10\",\n    pattern: /bin10/,\n    categories: [FunctionTokenType]\n});\n\nexport const Bin100 = createToken({\n    name: \"bin100\",\n    pattern: /bin100/,\n    categories: [FunctionTokenType]\n});\n\nexport const Bin1000 = createToken({\n    name: \"bin1000\",\n    pattern: /bin1000/,\n    categories: [FunctionTokenType]\n});\n\nexport const Bin10th = createToken({\n    name: \"bin10th\",\n    pattern: /bin10th/,\n    categories: [FunctionTokenType]\n});\n\nexport const Bin100th = createToken({\n    name: \"bin100th\",\n    pattern: /bin100th/,\n    categories: [FunctionTokenType]\n});\n\nexport const Bin1000th = createToken({\n    name: \"bin1000th\",\n    pattern: /bin1000th/,\n    categories: [FunctionTokenType]\n});\n\n// String functions\n\nexport const Length = createToken({\n    name: \"length\",\n    pattern: /length/,\n    categories: [FunctionTokenType]\n});\n\nexport const Lowercase = createToken({\n    name: \"lowercase\",\n    pattern: /lowercase/,\n    categories: [FunctionTokenType]\n});\n\nexport const Uppercase = createToken({\n    name: \"uppercase\",\n    pattern: /uppercase/,\n    categories: [FunctionTokenType]\n});\n\nexport const ConcatComma = createToken({\n    name: \"concat_comma\",\n    pattern: /concat_comma/,\n    categories: [FunctionTokenType]\n});\n\nexport const ConcatSpace = createToken({\n    name: \"concat_space\",\n    pattern: /concat_space/,\n    categories: [FunctionTokenType]\n});\n\n// Date functions\n\nexport const HourOfDay = createToken({\n    name: \"hour_of_day\",\n    pattern: /hour_of_day/,\n    categories: [FunctionTokenType]\n});\n\nexport const DayOfWeek = createToken({\n    name: \"day_of_week\",\n    pattern: /day_of_week/,\n    categories: [FunctionTokenType]\n});\n\nexport const MonthOfYear = createToken({\n    name: \"month_of_year\",\n    pattern: /month_of_year/,\n    categories: [FunctionTokenType]\n});\n\nexport const SecondBucket = createToken({\n    name: \"second_bucket\",\n    pattern: /second_bucket/,\n    categories: [FunctionTokenType]\n});\n\nexport const MinuteBucket = createToken({\n    name: \"minute_bucket\",\n    pattern: /minute_bucket/,\n    categories: [FunctionTokenType]\n});\n\nexport const HourBucket = createToken({\n    name: \"hour_bucket\",\n    pattern: /hour_bucket/\n});\n\nexport const DayBucket = createToken({\n    name: \"day_bucket\",\n    pattern: /day_bucket/,\n    categories: [FunctionTokenType]\n});\n\nexport const WeekBucket = createToken({\n    name: \"week_bucket\",\n    pattern: /week_bucket/,\n    categories: [FunctionTokenType]\n});\n\nexport const MonthBucket = createToken({\n    name: \"month_bucket\",\n    pattern: /month_bucket/,\n    categories: [FunctionTokenType]\n});\n\nexport const YearBucket = createToken({\n    name: \"year_bucket\",\n    pattern: /year_bucket/,\n    categories: [FunctionTokenType]\n});\n\n// Parenthesis\nexport const LeftParen = createToken({\n    name: \"leftParen\",\n    pattern: /\\(/\n});\n\nexport const RightParen = createToken({\n    name: \"rightParen\",\n    pattern: /\\)/\n});\n\n// Comma\nexport const Comma = createToken({\n    name: \"comma\",\n    pattern: /,/\n});\n\n// Whitespace\nexport const Whitespace = createToken({\n    name: \"whitespace\",\n    pattern: /\\s+/,\n    group: Lexer.SKIPPED\n});\n\n// Order of tokens is important\nconst tokens = [\n    Whitespace,\n    Comma,\n    As,\n    ColumnName,\n    LeftParen,\n    RightParen,\n    Add,\n    Subtract,\n    Multiply,\n    Divide,\n    Pow,\n    PercentOf,\n    Equals,\n    NotEquals,\n    GreaterThan,\n    LessThan,\n    Sqrt,\n    Pow2,\n    Abs,\n    Invert,\n    Log,\n    Exp,\n    Bin1000th,\n    Bin1000,\n    Bin100th,\n    Bin100,\n    Bin10th,\n    Bin10,\n    Length,\n    Is,\n    ConcatComma,\n    ConcatSpace,\n    Uppercase,\n    Lowercase,\n    HourOfDay,\n    DayOfWeek,\n    MonthOfYear,\n    SecondBucket,\n    MinuteBucket,\n    HourBucket,\n    DayBucket,\n    WeekBucket,\n    MonthBucket,\n    YearBucket,\n    UpperLowerCaseTokenType\n];\n\n// Add each token to the vocabulary exported for the Parser\ntokens.forEach(t => {\n    vocabulary[t.name] = t;\n});\n\nconst lexer = new Lexer(tokens, {\n    errorMessageProvider: PerspectiveLexerErrorMessage\n});\n\nexport const lex = function(input) {\n    const result = lexer.tokenize(input);\n\n    if (result.errors.length > 0) {\n        let message = result.errors.map(e => e.message);\n        throw new Error(`${message.join(\"\\n\")}`);\n    }\n\n    return result;\n};\n"],"file":"lexer.js"}