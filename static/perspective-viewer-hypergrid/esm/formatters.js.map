{"version":3,"sources":["../../src/js/formatters.js"],"names":["get_type_config","get_types","null_formatter","formatter","null_value","old","format","bind","val","x","custom_formatter","f","set_formatters","grid","formatters","type","config","format_function","float","localization","NumberFormatter","integer","datetime","DateFormatter","date","eval","add","header","value","behavior","formatColumnHeader","parse"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {get_type_config, get_types} from \"@finos/perspective/dist/esm/config\";\n\nfunction null_formatter(formatter, null_value = \"\") {\n    let old = formatter.format.bind(formatter);\n    formatter.format = val => {\n        if (typeof val === \"string\") {\n            return val;\n        }\n        if (null_value === val) {\n            return \"-\";\n        }\n        let x = old(val);\n        if (x === \"\") {\n            return \"-\";\n        }\n        return x;\n    };\n\n    return formatter;\n}\n\nfunction custom_formatter(formatter, f) {\n    let old = formatter.format.bind(formatter);\n    formatter.format = val => {\n        val = f(old(val));\n        if (!val) {\n            return \"-\";\n        }\n        return val;\n    };\n\n    return formatter;\n}\n\nexport function set_formatters(grid) {\n    const formatters = {};\n    for (const type of get_types()) {\n        const config = get_type_config(type);\n        const format_function = {\n            float: grid.localization.NumberFormatter,\n            integer: grid.localization.NumberFormatter,\n            datetime: grid.localization.DateFormatter,\n            date: grid.localization.DateFormatter\n        }[config.type || type];\n        if (format_function) {\n            if (typeof config.format === \"string\") {\n                formatters[type] = custom_formatter(new format_function(\"en-us\"), eval(config.format));\n            } else {\n                formatters[type] = null_formatter(new format_function(\"en-us\", config.format), config.null_value);\n            }\n            grid.localization.add(`perspective-${type}`, formatters[type]);\n        }\n    }\n\n    grid.localization.header = {\n        format: value => grid.behavior.formatColumnHeader(value)\n    };\n\n    grid.localization.add(\"FinanceTree\", {\n        format: function(val, type) {\n            const f = formatters[type];\n            if (f) {\n                return f.format(val);\n            }\n            return val;\n        },\n        parse: x => x\n    });\n}\n"],"file":"formatters.js"}