{"version":3,"sources":["../../src/js/psp-to-hypergrid.js"],"names":["COLUMN_SEPARATOR_STRING","TREE_COLUMN_INDEX","require","prototype","treeColumnIndex","page2hypergrid","data","row_pivots","columns","data_columns","Object","keys","firstcol","length","undefined","is_tree","flat_columns","filter","x","data_indices","map","indexOf","rows","ridx","dataRow","cidx","columnName","name","rollup","rowPath","concat","isLeaf","__ID__","join","__INDEX__","push","psp2hypergrid","schema","tschema","columnPaths","row","split","isTree","configuration","rowPivots","columnTypes","col","module","exports"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nconst COLUMN_SEPARATOR_STRING = \"|\";\n\nconst TREE_COLUMN_INDEX = require(\"faux-hypergrid/src/behaviors/Behavior\").prototype.treeColumnIndex;\n\nfunction page2hypergrid(data, row_pivots, columns) {\n    const data_columns = Object.keys(data);\n    const firstcol = data_columns.length > 0 ? data_columns[0] : undefined;\n    if (typeof firstcol === \"undefined\") {\n        return [];\n    }\n\n    const is_tree = !!row_pivots.length;\n    const flat_columns = row_pivots.length ? columns.filter(x => x !== \"__ROW_PATH__\") : columns;\n    const data_indices = data_columns.map(x => flat_columns.indexOf(x));\n    const rows = [];\n\n    for (let ridx = 0; ridx < data[firstcol].length; ridx++) {\n        const dataRow = {};\n\n        for (const cidx in data_columns) {\n            const columnName = data_columns[cidx];\n            dataRow[data_indices[cidx]] = data[columnName][ridx];\n        }\n\n        if (is_tree) {\n            if (data[\"__ROW_PATH__\"][ridx] === undefined) {\n                data[\"__ROW_PATH__\"][ridx] = [];\n            }\n\n            let name = data[\"__ROW_PATH__\"][ridx][data[\"__ROW_PATH__\"][ridx].length - 1];\n            if (name === undefined && ridx === 0) {\n                name = \"TOTAL\";\n            }\n\n            dataRow[TREE_COLUMN_INDEX] = {\n                rollup: name,\n                rowPath: [\"ROOT\"].concat(data[\"__ROW_PATH__\"][ridx]),\n                isLeaf: data[\"__ROW_PATH__\"][ridx].length >= row_pivots.length\n            };\n        }\n\n        if (data.__ID__) {\n            dataRow[\"__ID__\"] = data[\"__ID__\"][ridx].join(\"|\");\n        }\n\n        if (data.__INDEX__) {\n            dataRow[\"__INDEX__\"] = data[\"__INDEX__\"][ridx][0];\n        }\n\n        rows.push(dataRow);\n    }\n\n    return rows;\n}\n\nfunction psp2hypergrid(data, schema, tschema, row_pivots, columns) {\n    const flat_columns = row_pivots.length ? columns.filter(x => x !== \"__ROW_PATH__\") : columns;\n    const columnPaths = flat_columns.map(row => row.split(COLUMN_SEPARATOR_STRING));\n    const is_tree = !!row_pivots.length;\n    const rows = page2hypergrid(data, row_pivots, columns);\n\n    return {\n        rows: rows,\n        isTree: is_tree,\n        configuration: {},\n        rowPivots: row_pivots,\n        columnPaths: (is_tree ? [[\" \"]] : []).concat(columnPaths),\n        columnTypes: (is_tree ? [row_pivots.map(x => tschema[x])] : []).concat(columnPaths.map(col => schema[col[col.length - 1]]))\n    };\n}\n\nmodule.exports = {psp2hypergrid, page2hypergrid};\n"],"file":"psp-to-hypergrid.js"}