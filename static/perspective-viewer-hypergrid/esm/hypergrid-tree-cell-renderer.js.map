{"version":3,"sources":["../../src/js/hypergrid-tree-cell-renderer.js"],"names":["treeLineRendererPaint","gc","config","x","bounds","y","width","height","minWidth","value","rollup","leaf","isLeaf","depth","rowPath","length","parent","expanded","lastChild","last","backgroundColor","isSelected","backgroundSelectionColor","isRowHovered","hoverRowHighlight","enabled","isCellHovered","hoverCellHighlight","save","cache","fillStyle","rect","fillRect","fgColor","gridLinesHColor","strokeStyle","xOffset","lineNodeSpace","nodeRadius","globalAlpha","beginPath","i","lineHeight","moveTo","lineTo","arc","Math","PI","fill","stroke","closePath","foregroundSelectionColor","color","textAlign","textBaseline","font","foregroundSelectionFont","treeHeaderFont","cellTextOffset","formatted_value","formatValue","_type","getTextWidth","metrics","getTextWidthTruncated","yOffset","fillText","string","restore"],"mappings":"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","sourcesContent":["/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nexport function treeLineRendererPaint(gc, config) {\n    var x = config.bounds.x;\n    var y = config.bounds.y;\n    var width = config.bounds.width;\n    var height = config.bounds.height;\n\n    config.minWidth = 1;\n    if (config.value === null) {\n        return;\n    }\n\n    var value = config.value.rollup;\n    var leaf = config.value.isLeaf;\n    var depth = config.value.rowPath.length - 1;\n    var parent = config.expanded;\n    var lastChild = config.last;\n\n    var backgroundColor = config.backgroundColor;\n    if (config.isSelected) {\n        backgroundColor = config.backgroundSelectionColor;\n    }\n    if (config.isRowHovered && config.hoverRowHighlight.enabled && !config.isCellHovered) {\n        backgroundColor = config.hoverRowHighlight.backgroundColor;\n    } else if (config.isCellHovered && config.hoverCellHighlight.enabled) {\n        backgroundColor = config.hoverCellHighlight.backgroundColor;\n    }\n\n    gc.save();\n    gc.cache.fillStyle = backgroundColor;\n    gc.rect(x, y, width, height);\n    gc.fillRect(x, y, width, height);\n\n    var fgColor = config.gridLinesHColor; //config.isSelected ? config.foregroundSelectionColor : config.lineColor;\n    gc.cache.strokeStyle = fgColor;\n    gc.cache.fillStyle = fgColor;\n    var xOffset = x;\n    var lineNodeSpace = 16;\n    var nodeRadius = 3;\n\n    // Draw vertical line\n    gc.globalAlpha = 0.7;\n    gc.strokeStyle = fgColor;\n\n    gc.beginPath();\n    for (var i = 1; i <= depth; i++) {\n        xOffset += lineNodeSpace;\n        var lineHeight = lastChild && !parent ? height / 2 : height;\n        gc.moveTo(xOffset, y);\n        gc.lineTo(xOffset, y);\n        gc.lineTo(xOffset, y + lineHeight);\n        if (i === depth) {\n            gc.moveTo(xOffset, y + height / 2);\n            gc.lineTo(xOffset, y + height / 2);\n            gc.lineTo(xOffset + lineNodeSpace - nodeRadius, y + height / 2);\n        } else {\n            gc.lineTo(xOffset, y + height);\n        }\n    }\n\n    // Draw node circle\n    if (!leaf) {\n        gc.moveTo(xOffset + lineNodeSpace + nodeRadius, y + height / 2);\n        gc.arc(xOffset + lineNodeSpace, y + height / 2, nodeRadius, 0, 2 * Math.PI);\n        if (config.isCellHovered) {\n            gc.globalAlpha = 1.0;\n            gc.fill();\n            gc.globalAlpha = 0.7;\n        }\n    } else {\n        gc.lineTo(xOffset + lineNodeSpace + nodeRadius, y + height / 2);\n    }\n\n    if (parent && !leaf) {\n        gc.globalAlpha = 0.5;\n        gc.fill();\n        gc.moveTo(xOffset + lineNodeSpace, y + height / 2 + nodeRadius);\n        gc.lineTo(xOffset + lineNodeSpace, y + height);\n        gc.globalAlpha = 0.7;\n    }\n\n    gc.stroke();\n    gc.closePath();\n\n    // render message text\n\n    gc.globalAlpha = 1.0;\n    gc.fillStyle = config.isSelected ? config.foregroundSelectionColor : config.color;\n    gc.textAlign = \"start\";\n    gc.textBaseline = \"middle\";\n    gc.font = config.isSelected ? config.foregroundSelectionFont : config.treeHeaderFont;\n    var cellTextOffset = xOffset + lineNodeSpace + 2 * nodeRadius + 3;\n    let formatted_value = config.formatValue(value, config._type);\n    config.minWidth = cellTextOffset + gc.getTextWidth(formatted_value) + 15;\n    var metrics = gc.getTextWidthTruncated(formatted_value, width - cellTextOffset + (x - 3), true);\n    var yOffset = y + height / 2;\n    gc.fillText(metrics.string ? metrics.string : formatted_value, cellTextOffset, yOffset);\n    gc.restore();\n}\n"],"file":"hypergrid-tree-cell-renderer.js"}